stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=KPI, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.5),
position=position_identity()
)
source('~/DataVisualization/Rprofile.R', echo=TRUE)
# "Crosstabs, KPIs, Barchart.twb" Equivalent Operations
# KPI Story 2 and Parameters Story 3:
# These will be made to more resemble Tableau Parameters when we study Shiny.
KPI_Low_Max_value = 4750
KPI_Medium_Max_value = 5000
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, sum_price, sum_carat, kpi as ratio,
case
when kpi < "p1" then \\\'Low\\\'
when kpi < "p2" then \\\'Medium\\\'
else \\\'High\\\'
end kpi
from (select color,
sum(price) sum_price, sum(carat) sum_carat,
sum(price) / sum(carat) kpi
from diamonds
group by color)
order by color desc;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
df <- diamonds %>% group_by(color) %>% summarize(sum_price = sum(price), sum_carat = sum(carat)) %>% mutate(ratio = sum_price / sum_carat) %>% mutate(kpi = ifelse(ratio <= KPI_Low_Max_value, 'Low', ifelse(ratio <= KPI_Medium_Max_value, 'Medium', 'High'))) %>% rename(COLOR=color, SUM_PRICE=sum_price, SUM_CARAT=sum_carat, RATIO=ratio, KPI=kpi)
spread(df, COLOR, SUM_PRICE) %>% View
# ggplot(df, aes(x=COLOR, y=KPI, label=SUM_PRICE, fill=KPI)) + geom_text(colour="black") + geom_tile(alpha=0.5)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Diamonds Crosstab') +
labs(x=paste("COLOR"), y=paste("CLARITY")) +
layer(data=df,
mapping=aes(x=COLOR, y=KPI, label=SUM_PRICE),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=KPI, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.5),
position=position_identity()
)
spread(df, COLOR, SUM_PRICE) %>% View
spread(df, COLOR, AVG_PRICE) %>% View
require("ggplot2")
source('~/DataVisualization/Rprofile.R', echo=TRUE)
# The following is equivalent to KPI Story 2 Sheet 2 and Parameters Story 3 in "Crosstabs, KPIs, Barchart.twb"
# These will be made to more resemble Tableau Parameters when we study Shiny.
KPI_Low_Max_value = 4750
KPI_Medium_Max_value = 5000
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, clarity, sum_price, round(sum_carat) as sum_carat, kpi as ratio,
case
when kpi < "p1" then \\\'03 Low\\\'
when kpi < "p2" then \\\'02 Medium\\\'
else \\\'01 High\\\'
end kpi
from (select color, clarity,
sum(price) sum_price, sum(carat) sum_carat,
sum(price) / sum(carat) kpi
from diamonds
group by color, clarity)
order by clarity;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
# df <- diamonds %>% group_by(color, clarity) %>% summarize(sum_price = sum(price), sum_carat = sum(carat)) %>% mutate(ratio = sum_price / sum_carat) %>% mutate(kpi = ifelse(ratio <= KPI_Low_Max_value, '03 Low', ifelse(ratio <= KPI_Medium_Max_value, '02 Medium', '01 High'))) %>% rename(COLOR=color, CLARITY=clarity, SUM_PRICE=sum_price, SUM_CARAT=sum_carat, RATIO=ratio, KPI=kpi)
spread(df, COLOR, SUM_PRICE) %>% View
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Diamonds Crosstab\nSUM_PRICE, SUM_CARAT, SUM_PRICE / SUM_CARAT') +
labs(x=paste("COLOR"), y=paste("CLARITY")) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=SUM_PRICE),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=SUM_CARAT),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=2),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=round(RATIO, 2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=4),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)
# The following is equivalent to Windowing Story 5 Sheet 4 in "Crosstabs, KPIs, Barchart.twb"
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, clarity, avg_price,
avg(avg_price)
OVER (PARTITION BY clarity ) as window_avg_price
from (select color, clarity, avg(price) avg_price
from diamonds
group by color, clarity)
order by clarity;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
# df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price)) %>% rename(COLOR=color, CLARITY=clarity)
# df1 <- df %>% ungroup %>% group_by(CLARITY) %>% summarize(WINDOW_AVG_PRICE=mean(AVG_PRICE))
# df <- inner_join(df, df1, by="CLARITY")
spread(df, COLOR, AVG_PRICE) %>% View
source('~/DataVisualization/Project 4/03 R SQL Visualizations/R SQL.R', echo=TRUE)
source('~/DataVisualization/Rprofile.R', echo=TRUE)
source('~/DataVisualization/Project 4/03 R SQL Visualizations/R SQL.R', echo=TRUE)
source('~/DataVisualization/Project 4/01 Data/Death_Dataframes.R', echo=TRUE)
source('~/DataVisualization/Project 4/03 R SQL Visualizations/R SQL.R', echo=TRUE)
#Graph 2: Crosstab that shows the Sum of the number of deaths, deaths per 100,000, and the Ratio of those two measures for Sex and Age Groups and Gives a KPI relating to the ratio.
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Mortality of the World Population\n Number of Deaths(millions), Sum of Death Rate per 100,000 (millions),\n and Ratio Between the Number of Deaths and Death Rate') +
labs(x=paste("Age Group"), y=paste("Sex")) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(SUM_DEATH,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(SUM_100,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=2),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(RATIO, 2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=4),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)+
xlim(levels(mymelt$industry))
#Graph 2: Crosstab that shows the Sum of the number of deaths, deaths per 100,000, and the Ratio of those two measures for Sex and Age Groups and Gives a KPI relating to the ratio.
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Mortality of the World Population\n Number of Deaths(millions), Sum of Death Rate per 100,000 (millions),\n and Ratio Between the Number of Deaths and Death Rate') +
labs(x=paste("Age Group"), y=paste("Sex")) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(SUM_DEATH,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(SUM_100,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=2),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(RATIO, 2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=4),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)+
xlim(levels(mymelt$age_group))
library("reshape2", lib.loc="~/R/win-library/3.2")
#Graph 2: Crosstab that shows the Sum of the number of deaths, deaths per 100,000, and the Ratio of those two measures for Sex and Age Groups and Gives a KPI relating to the ratio.
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Mortality of the World Population\n Number of Deaths(millions), Sum of Death Rate per 100,000 (millions),\n and Ratio Between the Number of Deaths and Death Rate') +
labs(x=paste("Age Group"), y=paste("Sex")) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(SUM_DEATH,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(SUM_100,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=2),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(RATIO, 2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=4),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)+
xlim(levels(mymelt$age_group))
#Graph 2: Crosstab that shows the Sum of the number of deaths, deaths per 100,000, and the Ratio of those two measures for Sex and Age Groups and Gives a KPI relating to the ratio.
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Mortality of the World Population\n Number of Deaths(millions), Sum of Death Rate per 100,000 (millions),\n and Ratio Between the Number of Deaths and Death Rate') +
labs(x=paste("Age Group"), y=paste("Sex")) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(SUM_DEATH,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(SUM_100,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=2),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(RATIO, 2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=4),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)+
xlim(levels(melt$age_group))
#Graph 2: Crosstab that shows the Sum of the number of deaths, deaths per 100,000, and the Ratio of those two measures for Sex and Age Groups and Gives a KPI relating to the ratio.
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Mortality of the World Population\n Number of Deaths(millions), Sum of Death Rate per 100,000 (millions),\n and Ratio Between the Number of Deaths and Death Rate') +
labs(x=paste("Age Group"), y=paste("Sex")) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(SUM_DEATH,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(SUM_100,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=2),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(RATIO, 2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=4),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)+
xlim(levels(mymelt$age_group))
#Graph 2: Crosstab that shows the Sum of the number of deaths, deaths per 100,000, and the Ratio of those two measures for Sex and Age Groups and Gives a KPI relating to the ratio.
ggplot(mymelt) +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Mortality of the World Population\n Number of Deaths(millions), Sum of Death Rate per 100,000 (millions),\n and Ratio Between the Number of Deaths and Death Rate') +
labs(x=paste("Age Group"), y=paste("Sex")) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(SUM_DEATH,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(SUM_100,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=2),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, label=round(RATIO, 2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=4),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=age_group, y=sex, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)+
xlim(levels(mymelt$age_group))
help(sort)
sort('x','b','s','a')
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Mortality of the World Population\n Number of Deaths(millions), Sum of Death Rate per 100,000 (millions),\n and Ratio Between the Number of Deaths and Death Rate') +
labs(x=paste("Age Group"), y=paste("Sex")) +
layer(data=KPI_df,
mapping=aes(x=as.character(age_group), y=sex, label=round(SUM_DEATH,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=as.character(age_group), y=sex, label=round(SUM_100,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=2),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=as.character(age_group), y=sex, label=round(RATIO, 2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=4),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=as.character(age_group), y=sex, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)
#Graph 2: Crosstab that shows the Sum of the number of deaths, deaths per 100,000, and the Ratio of those two measures for Sex and Age Groups and Gives a KPI relating to the ratio.
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Mortality of the World Population\n Number of Deaths(millions), Sum of Death Rate per 100,000 (millions),\n and Ratio Between the Number of Deaths and Death Rate') +
labs(x=paste("Age Group"), y=paste("Sex")) +
layer(data=KPI_df,
mapping=aes(x=as.character(age_group), y=sex, label=round(SUM_DEATH,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=as.character(age_group), y=sex, label=round(SUM_100,2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=2),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=as.character(age_group), y=sex, label=round(RATIO, 2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=4),
position=position_identity()
) +
layer(data=KPI_df,
mapping=aes(x=as.character(age_group), y=sex, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)+
x  = factor(x, levels=c("0-6 d", "7-27 d", "28-364 d","1-4", "5-9", "10-14","15-19", "20-24", "25-29","30-34", "40-44", "45-49","50-54", "55-59","60-64", "65-69", "70-74","75-79", "80+", "All ages"))
setwd("C:/Users/Nathan R/Documents/DataVisualization/Project 4/01 Data/CSVs")
file_path <- "Effect of Disease Country Pop.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
#Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Year","Number of Deaths", "Death Rate Per 100,000")
#measures <- NA # Do this if there are no measures.
#Get rid of special characters in each column.
#Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
#Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                      \_/
#The following is an example of dealing with special cases like making state abbreviations be all upper case.
#df["State"] <- data.frame(lapply(df["State"], toupper))
#Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
