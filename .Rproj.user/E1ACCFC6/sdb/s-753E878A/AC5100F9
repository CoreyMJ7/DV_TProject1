{
    "contents" : "---\ntitle: \"Project 5 Knit\"\nauthor: \"Nathan Riojas, Ryan Billa, Corey Monreal-Jackson\"\ndate: \"November 13, 2015\"\noutput: html_document\n---\n\n#### Steps used to create this project\n#####1. Using GitHub, create a Repo\n#####2. Clone the Repository into the Data Visualization Folder (Or the folder you wish)\n#####3. Create R Studio Folders for all the project development (folder descriptions below)\n#####4. Find a CSV that permits the creation of crosstabs, bar charts, and scatter plots\n#####5. Modify the R_ETL.R given and run the code to get the code to develop a SQL table\n#####6. Using Oracle SQL Developer, paste the code output from the R_ETL.R script to create a table\n#####7. After the table is created, import the data from the CSV reformattted file to the table\n#####9. Using R and SQL, recreate the three required visualization plots that were made in tableau\n#####10. Blend the new data source using tableau and R and SQL. The .twbx will be placed in 02 Tableau\n\n#### Folders Needed\n#####00 Doc: Holds the .Rmd and .html files containing these instructions and project output. Also holds RPROFILE to load all required packages and has the png files.\n#####01 Data: Generates the code to create the table in Oracle. Gathers the data from the database for and puts it into data frames.\n#####02 Tableau: Contains the .twbx file that has the tableau workbook\n#####03 R SQL Visualizations: Contains the .R files that use ggplot to generate our graphs\n\n#### Data Description\n##### Our data looks at the way disease affects different countries accross the world. The two main variables are the number of deaths due to disease and the death rate per 100,000. The latter is a standard way of normalizing the number of deaths to be able to accurately compare and scale the effect disease has on each country despite size differences. This data is an accumulation of data from 1975-2010.\n\n#### R markdown code\n#####Immediately below is the code that embeds the pictures into the HTML\n#####Since this project is only for Tableau, the third folder was not used.\n\n\n```\n#setwd(\"C:/Users/Nathan R/Documents/DataVisualization/Project 4/01 Data/CSVs\")\n\n#file_path <- \"Effect of Disease Country Pop.csv\"\n\n#df <- read.csv(file_path, stringsAsFactors = FALSE)\n\n##Replace \".\" (i.e., period) with \"_\" in the column names.\n#names(df) <- gsub(\"\\\\.+\", \"_\", names(df))\n\n#str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.\n\n#measures <- c(\"Year\",\"Number of Deaths\", \"Death Rate Per 100,000\")\n##measures <- NA # Do this if there are no measures.\n\n##Get rid of special characters in each column.\n##Google ASCII Table to understand the following:\n#for(n in names(df)) {\n#  df[n] <- data.frame(lapply(df[n], gsub, pattern=\"[^ -~]\",replacement= \"\"))\n#}\n\n#dimensions <- setdiff(names(df), measures)\n#if( length(measures) > 1 || ! is.na(dimensions)) {\n#  for(d in dimensions) {\n#    # Get rid of \" and ' in dimensions.\n#    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"[\\\"']\",replacement= \"\"))\n#    # Change & to and in dimensions.\n#    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"&\",replacement= \" and \"))\n#    # Change : to ; in dimensions.\n#    df[d] <- data.frame(lapply(df[d], gsub, pattern=\":\",replacement= \";\"))\n#  }\n#}\n\n#library(lubridate)\n##Fix date columns, this needs to be done by hand because | needs to be correct.\n##                                                      \\_/\n\n\n##The following is an example of dealing with special cases like making state abbreviations be all upper case.\n##df[\"State\"] <- data.frame(lapply(df[\"State\"], toupper))\n\n##Get rid of all characters in measures except for numbers, the - sign, and period.dimensions\n#if( length(measures) > 1 || ! is.na(measures)) {\n#  for(m in measures) {\n#    df[m] <- data.frame(lapply(df[m], gsub, pattern=\"[^--.0-9]\",replacement= \"\"))\n#  }\n#}\n\n#write.csv(df, paste(gsub(\".csv\", \"\", file_path), \".reformatted.csv\", sep=\"\"), row.names=FALSE, na = \"\")\n\n#tableName <- gsub(\" +\", \"_\", gsub(\"[^A-z, 0-9, ]\", \"\", gsub(\".csv\", \"\", file_path)))\n#sql <- paste(\"CREATE TABLE\", tableName, \"(\\n-- Change table_name to the table name you want.\\n\")\n#if( length(measures) > 1 || ! is.na(dimensions)) {\n#  for(d in dimensions) {\n#    sql <- paste(sql, paste(d, \"varchar2(4000),\\n\"))\n#  }\n#}\n#if( length(measures) > 1 || ! is.na(measures)) {\n#  for(m in measures) {\n#    if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, \"number(38,4),\\n\"))\n#    else sql <- paste(sql, paste(m, \"number(38,4)\\n\"))\n#  }\n#}\n#sql <- paste(sql, \");\")\n#cat(sql)\n```\n\n\n\n```\n#require(tidyr)\n#require(dplyr)\n#require(ggplot2)\n\n#setwd(\"C:/Users/Nathan R/Documents/DataVisualization/Project 4/01 Data/CSVs\")\n\n#file_path <- \"Country GDP.csv\"\n\n#df <- read.csv(file_path, stringsAsFactors = FALSE)\n\n## Replace \".\" (i.e., period) with \"_\" in the column names.\n#names(df) <- gsub(\"\\\\.+\", \"_\", names(df))\n\n## str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.\n\n#measures <- c(\"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\" , \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", #\"2018\", \"2019\", \"2020\")\n##measures <- NA # Do this if there are no measures.\n\n## Get rid of special characters in each column.\n## Google ASCII Table to understand the following:\n#for(n in names(df)) {\n#  df[n] <- data.frame(lapply(df[n], gsub, pattern=\"[^ -~]\",replacement= \"\"))\n#}\n\n#dimensions <- setdiff(names(df), measures)\n#if( length(measures) > 1 || ! is.na(dimensions)) {\n#  for(d in dimensions) {\n#    # Get rid of \" and ' in dimensions.\n#    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"[\\\"']\",replacement= \"\"))\n#    # Change & to and in dimensions.\n#    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"&\",replacement= \" and \"))\n#    # Change : to ; in dimensions.\n#    df[d] <- data.frame(lapply(df[d], gsub, pattern=\":\",replacement= \";\"))\n#  }\n#}\n\n#library(lubridate)\n## Fix date columns, this needs to be done by hand because | needs to be correct.\n##                                                        \\_/\n#df$Order_Date <- gsub(\" [0-9]+:.*\", \"\", gsub(\" UTC\", \"\", mdy(as.character(df$Order_Date), tz=\"UTC\")))\n#df$Ship_Date  <- gsub(\" [0-9]+:.*\", \"\", gsub(\" UTC\", \"\", mdy(as.character(df$Ship_Date),  tz=\"UTC\")))\n\n## The following is an example of dealing with special cases like making state abbreviations be all upper case.\n## df[\"State\"] <- data.frame(lapply(df[\"State\"], toupper))\n\n## Get rid of all characters in measures except for numbers, the - sign, and period.dimensions\n#if( length(measures) > 1 || ! is.na(measures)) {\n#  for(m in measures) {\n#    df[m] <- data.frame(lapply(df[m], gsub, pattern=\"[^--.0-9]\",replacement= \"\"))\n#  }\n#}\n\n#write.csv(df, paste(gsub(\".csv\", \"\", file_path), \".reformatted.csv\", sep=\"\"), row.names=FALSE, na = \"\")\n\n#tableName <- gsub(\" +\", \"_\", gsub(\"[^A-z, 0-9, ]\", \"\", gsub(\".csv\", \"\", file_path)))\n#sql <- paste(\"CREATE TABLE\", tableName, \"(\\n-- Change table_name to the table name you want.\\n\")\n#if( length(measures) > 1 || ! is.na(dimensions)) {\n#  for(d in dimensions) {\n#    sql <- paste(sql, paste(d, \"varchar2(4000),\\n\"))\n#  }\n#}\n#if( length(measures) > 1 || ! is.na(measures)) {\n#  for(m in measures) {\n#    if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, \"number(38,4),\\n\"))\n#    else sql <- paste(sql, paste(m, \"number(38,4)\\n\"))\n#  }\n#}\n#sql <- paste(sql, \");\")\n#cat(sql)\n```\n\n\n\n### Visualizations\n\n\n\n###   Bar Chart: \n####Shows how the death rate affects the sexes in several countries\n\n![](../00 Doc/Bar Chart.png)\n\n###   Crosstab: \n####Shows how countries deaths rates are relative to each other using KPI\n\n![](../00 Doc/CrossTab.png)\n\n###   Scatter Plot: \n####Shows how number of deaths correlates to the death rate for sex and age groups\n\n![](../00 Doc/Scatter Plot.png)\n\n### R and SQL Code And Visualizations:\n\n```{r warning = FALSE}\n#source(\"../01 Data/Death_dataframes,R\", echo = TRUE)\n#source(\"../03 R SQL Visualizations/R SQL.R\", echo = TRUE)\n```{r}\n\n",
    "created" : 1447478078509.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "269940708",
    "id" : "AC5100F9",
    "lastKnownWriteTime" : 1447478084,
    "path" : "~/DataVisualization/DV_TProject1/00 Doc/TProject.Rmd",
    "project_path" : "00 Doc/TProject.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_markdown"
}